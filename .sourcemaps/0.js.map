{"version":3,"sources":["../../src/pages/news/news.module.ts","../../src/pages/news/news.actions.ts","../../src/pages/news/news.service.ts","../../src/pages/news/news.ts","../../src/pages/news/news.effect.ts","../../node_modules/rxjs/add/operator/switchMap.js","../../node_modules/rxjs/operator/switchMap.js","../../node_modules/rxjs/add/operator/withLatestFrom.js","../../node_modules/rxjs/add/operator/map.js","../../node_modules/rxjs/add/observable/of.js","../../node_modules/rxjs/add/observable/forkJoin.js","../../src/pages/news/news.reducer.ts"],"names":[],"mappings":"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","file":"0.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { NewsPage } from './news';\nimport {EffectsModule} from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport {NewsEffects} from './news.effect';\nimport {reducer} from './news.reducer';\nimport {NewsService} from './news.service';\n\n\n@NgModule({\n  declarations: [\n    NewsPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(NewsPage),\n    StoreModule.forFeature('newsState',reducer),\n    EffectsModule.forFeature([NewsEffects])\n  ],\n  providers:[NewsService]\n})\nexport class NewsPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/news/news.module.ts","import {Action} from '@ngrx/store';\n\nexport interface feedQuery{\n    type: string,\n    pageNumber: number\n}\n\nexport interface itemQuery{\n    id: number\n}\n\nexport const LOAD_FEEDS = '[Load] Feeds';\nexport const LOAD_FEEDS_SUCCESS = '[Load] Feeds Success';\nexport const LOAD_FEEDS_PENDING = '[Load] Feeds Pending';\nexport const LOAD_FEEDS_ERROR = '[Load] Feeds Error';\n\nexport class LoadFeedsAction implements Action {\n    type = LOAD_FEEDS;\n    constructor(public payload: feedQuery){}\n}\n\nexport class LoadFeedsSuccessAction implements Action {\n    type = LOAD_FEEDS_SUCCESS;\n\n    constructor(public payload: object){}\n}\n\nexport class LoadFeedsPendingAction implements Action {\n    type = LOAD_FEEDS_PENDING;\n\n    constructor(public payload: object){}\n}\n\nexport class LoadFeedsErrorAction implements Action {\n    type = LOAD_FEEDS_ERROR;\n\n    constructor(public payload: object){}\n}\n\nexport const LOAD_ITEM = '[Load] Item';\nexport const LOAD_ITEM_SUCCESS = '[Load] Item Success';\nexport const LOAD_ITEM_PENDING = '[Load] Item Pending';\nexport const LOAD_ITEM_ERROR = '[Load] Item Error';\n\nexport class LoadItemAction implements Action {\n    type = LOAD_ITEM;\n    constructor(public payload: object){}\n}\n\nexport class LoadItemSuccessAction implements Action {\n    type = LOAD_ITEM_SUCCESS;\n\n    constructor(public payload: object){}\n}\n\nexport class LoadItemPendingAction implements Action {\n    type = LOAD_ITEM_PENDING;\n\n    constructor(public payload: object){}\n}\n\nexport class LoadItemErrorAction implements Action {\n    type = LOAD_ITEM_ERROR;\n\n    constructor(public payload: object){}\n}\n\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/news/news.actions.ts","import { Injectable } from '@angular/core';\nimport { Observable} from 'rxjs/Observable';\nimport {ApiService} from '../../shared/services/api.service';\nimport {HelperService} from '../../shared/services/helper.service';\nimport \"rxjs/add/observable/forkJoin\";\n\n\n@Injectable()\nexport class NewsService {\n\n  constructor(private apiService: ApiService, private helperService: HelperService) {\n\n  }\n\n  getItem(id: number){\n    return this.apiService.getItem(id);\n  }\n\n  getItems(itemIds: Array<number>){\n\n    const calls = [];\n    itemIds.forEach(id =>{\n        calls.push(this.apiService.getItem(id));\n    });\n    return Observable.forkJoin(calls);\n\n  }\n\n  getFeedIds(feed: string): Observable<any>{\n    return this.apiService.getFeed(feed);\n  }\n\n  paginateFeedIds(feedIds: Array<number>,pageNumber: number = 1, pageSize: number = 15){\n    return this.helperService.paginate(feedIds,pageNumber,pageSize);\n  }\n\n  getFeedKey(urlKey:string){\n\n    let urlKeyToFeedKey = {\n\n        new:'newstories',\n        top: 'topstories',\n        best: 'beststories',\n        ask: 'askstories',\n        show: 'showstories',\n        job: 'jobstories'\n    }\n    return urlKeyToFeedKey[urlKey];\n  }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/news/news.service.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\n\n@IonicPage()\n@Component({\n  selector: 'page-news',\n  templateUrl: 'news.html',\n})\nexport class NewsPage {\n\n  topRoot: string = 'TopPage';\n  bestRoot: string = 'BestPage';\n  newRoot: string = 'NewPage';\n  myIndex: number;\n\n  constructor(public navCtrl: NavController, public navParams: NavParams) {\n  }\n\n  ionViewDidLoad() {\n    console.log('ionViewDidLoad NewsPage');\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/news/news.ts","import { Injectable } from \"@angular/core\";\nimport { Store, Action } from \"@ngrx/store\";\nimport { Actions, Effect} from \"@ngrx/effects\";\nimport { Observable} from \"rxjs/Observable\";\nimport \"rxjs/add/operator/switchMap\";\nimport \"rxjs/add/operator/withLatestFrom\";\nimport \"rxjs/add/operator/map\";\nimport \"rxjs/add/operator/do\";\nimport \"rxjs/add/operator/catch\";\nimport \"rxjs/add/observable/of\";\nimport * as newsActions from \"./news.actions\";\nimport {State} from './news.reducer';\nimport {NewsService} from './news.service';\n\n\n@Injectable()\nexport class NewsEffects {\n  constructor(public actions$: Actions,public store$: Store<State>,public newsService: NewsService) {}\n\n  @Effect()\n  loadFeeds$: Observable<Action> = this.actions$.ofType(newsActions.LOAD_FEEDS)\n                                        \n                                            .do((action)=> new newsActions.LoadFeedsPendingAction({currentFeed: action['payload'].type}))\n                                            .withLatestFrom(this.store$)\n                                            .map(([action,state])=> {\n                                                \n                                                return {feed: state.newsState[action['payload'].type], payload: action['payload'] };\n                                            })\n                                            .switchMap(actionAndState =>{\n\n                                                if(!Object.keys(actionAndState.feed).length){ //If feed type data is empty\n\n                                                    return this.newsService.getFeedIds(this.newsService.getFeedKey(actionAndState.payload.type))\n                                                                \n                                                                    .do((response)=>{\n                                                                        \n                                                                    })\n                                                                    .map((feedIds: any)=> {\n                                                                        \n                                                                        return this.newsService.paginateFeedIds(feedIds)\n                                                                    })\n                                                                    .switchMap((feedType: any) =>{\n                                    \n                                                                       return this.newsService.getItems(feedType[actionAndState.payload.pageNumber])\n                                                                                    \n                                                                                        .map((feeds: Array<any>)=> {\n                                                                                            \n                                                                                            return {\n                                                                                                [actionAndState.payload.type] : feedType,\n                                                                                                feeds: feeds,\n                                                                                                currentFeed: actionAndState.payload.type\n                                                                                            }\n                                                                                        })\n                                                                                    \n                                                                    })\n                                                                \n                                                }else{\n                                                    \n                                                    return this.newsService.getItems(actionAndState.feed[actionAndState.payload.pageNumber])\n                                                               \n                                                                    .map((feeds: Array<any>)=> {\n                                                                        \n                                                                        let feedData = actionAndState.feed;\n                                                                        feedData['pageNumber'] = actionAndState.payload.pageNumber;\n\n                                                                        return {\n                                                                            feeds: feeds,\n                                                                            currentFeed: actionAndState.payload.type,\n                                                                            [actionAndState.payload.type]: feedData\n                                                                        }\n                                                                    })            \n                                                 }\n                                    \n                                            })\n\n                                            .map((partialState: {})=> new newsActions.LoadFeedsSuccessAction(partialState))\n                                            .catch( err => Observable.of(new newsActions.LoadFeedsErrorAction({feeds:[]})))   \n                                        \n\n\n\n @Effect()\n  loadItem$: Observable<Action> = this.actions$.ofType(newsActions.LOAD_ITEM)\n                                               \n                                                .do((action) => new newsActions.LoadItemPendingAction({story:{}}))\n                                                .switchMap((action)=>{\n                                                        return this.newsService.getItem(action['payload'].id);\n                                                })\n                                                .switchMap((story)=>{\n                                                        \n                                                        if(story['kids'].length){\n                                                            return this.newsService.getItems(story['kids'])\n                                                                                    .map((comments: Array<any>)=>{\n\n                                                                                        story['kids'] = Object.assign([],comments);\n                                                                                        return {story: story};\n                                                                                    })\n                                                                                \n                                                        }else{\n                                                            return Observable.of({story: story});\n                                                        }\n                                                    })\n                                                    .map((partialState: {})=> new newsActions.LoadItemSuccessAction (partialState))\n                                                    .catch( err => Observable.of(new newsActions.LoadItemErrorAction(err))) \n                                               \n                                        \n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/news/news.effect.ts","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switchMap_1 = require('../../operator/switchMap');\nObservable_1.Observable.prototype.switchMap = switchMap_1.switchMap;\n//# sourceMappingURL=switchMap.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/add/operator/switchMap.js\n// module id = 441\n// module chunks = 0","\"use strict\";\nvar switchMap_1 = require('../operators/switchMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return switchMap_1.switchMap(project, resultSelector)(this);\n}\nexports.switchMap = switchMap;\n//# sourceMappingURL=switchMap.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/operator/switchMap.js\n// module id = 442\n// module chunks = 0","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar withLatestFrom_1 = require('../../operator/withLatestFrom');\nObservable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;\n//# sourceMappingURL=withLatestFrom.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/add/operator/withLatestFrom.js\n// module id = 443\n// module chunks = 0","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar map_1 = require('../../operator/map');\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/add/operator/map.js\n// module id = 444\n// module chunks = 0","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar of_1 = require('../../observable/of');\nObservable_1.Observable.of = of_1.of;\n//# sourceMappingURL=of.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/add/observable/of.js\n// module id = 445\n// module chunks = 0","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar forkJoin_1 = require('../../observable/forkJoin');\nObservable_1.Observable.forkJoin = forkJoin_1.forkJoin;\n//# sourceMappingURL=forkJoin.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rxjs/add/observable/forkJoin.js\n// module id = 446\n// module chunks = 0","import * as fromRoot from '../../store/reducers';\nimport * as newsActions from './news.actions';\nimport {Feed} from '../../store/models/feed.model';\n\n//section 1\nexport interface NewsState{\n    loading: boolean,\n    new: object,\n    top: object,\n    best: object,\n    ask: object,\n    show: object,\n    job: object,\n    feeds: Array<Feed>,\n    error: object,\n    currentFeed: string,\n    story: {}\n}\n\n//section 2\nexport const initialState : NewsState = {\n\n    loading: false,\n    new: {},\n    top: {},\n    best: {},\n    ask: {},\n    show: {},\n    job: {},\n    feeds: [],\n    error: {},\n    currentFeed: \"\",\n    story: {}\n}\n\n\nexport function reducer(state: NewsState = initialState, action: {type,payload}) {\n\n    // Section 3\n    switch(action.type) {\n\n        case newsActions.LOAD_FEEDS:\n            return {...state, loading: true};\n\n        case newsActions.LOAD_FEEDS_PENDING:\n            return {...state, loading: true, ...action.payload};\n\n        case newsActions.LOAD_FEEDS_SUCCESS:\n            return {...state, loading: false, ...action.payload}\n\n        case newsActions.LOAD_FEEDS_ERROR:\n            return {...state, loading: false, ...action.payload}\n\n        case newsActions.LOAD_ITEM:\n             return {...state, loading: true};\n        \n        case newsActions.LOAD_ITEM_PENDING:\n             return {...state, loading: true,...action.payload};\n\n        case newsActions.LOAD_ITEM_SUCCESS:\n             return {...state, loading: false, ...action.payload};\n\n        case newsActions.LOAD_ITEM_ERROR:\n             return {...state, loading: false, story: {}};\n\n        default:\n            return state;\n    }\n}\n\nexport interface State extends fromRoot.State {\n    'newsState': NewsState\n}\n\n//export const getFeedState = createFeatureSelector<FeedState>('feedState');\n\n//export const getTop = createSelector(getFeedState,(state: FeedState) => state.top);\n\n\n// WEBPACK FOOTER //\n// ./src/pages/news/news.reducer.ts"],"sourceRoot":""}